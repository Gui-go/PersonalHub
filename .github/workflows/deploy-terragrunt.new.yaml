name: "Terragrunt CI/CD"

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, closed]

env:
  TERRAGRUNT_VERSION: 0.46.3
  TF_VERSION: 1.11.4
  TERRAGRUNT_WORKING_DIR: ./infrastructure  # root folder with terragrunt.hcl

jobs:
  terragrunt:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      pull-requests: write  # needed to post PR comments

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Set up Terragrunt
        uses: autero1/actions-terragrunt@v1.3.2
        with:
          terragrunt_version: ${{ env.TERRAGRUNT_VERSION }}

      # Optional: Authenticate to cloud provider if needed (e.g., GCP)
      # - name: Authenticate to Google Cloud
      #   uses: google-github-actions/auth@v2
      #   with:
      #     workload_identity_provider: ${{ env.WIF_PROVIDER }}
      #     service_account: ${{ env.SERVICE_ACCOUNT }}

      - name: Terragrunt Validate
        working-directory: ${{ env.TERRAGRUNT_WORKING_DIR }}
        run: terragrunt validate

      - name: Terragrunt Plan
        if: github.event.pull_request.merged != true
        working-directory: ${{ env.TERRAGRUNT_WORKING_DIR }}
        run: terragrunt plan -out=plan.out | tee terragrunt-plan.log

      - name: Terragrunt Apply
        if: github.event.pull_request.merged == true
        working-directory: ${{ env.TERRAGRUNT_WORKING_DIR }}
        run: terragrunt apply -auto-approve

      - name: Post PR Comment (Plan Results)
        if: github.event_name == 'pull_request' && github.event.pull_request.merged != true
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const planPath = './infrastructure/terragrunt-plan.log';
            let planOutput = 'Terragrunt plan output not found.';
            if (fs.existsSync(planPath)) {
              planOutput = fs.readFileSync(planPath, 'utf8').substring(0, 60000); // limit output to avoid exceeding comment size
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### Terragrunt Plan Output\n\`\`\`\n${planOutput}\n\`\`\``
            })
